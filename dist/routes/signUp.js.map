{"version":3,"sources":["../../src/routes/signUp.js"],"names":["router","Router","saltRounds","salt","genSaltSync","validateInput","data","errors","query","where","email","orWhere","username","fetch","then","user","get","isValid","post","req","res","body","fullname","password","hashedPassword","hashSync","console","log","forge","hasTimestamps","save","status","json","success","catch","error","err"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;AACA,IAAMC,aAAa,EAAnB;AACA,IAAMC,OAAO,iBAAOC,WAAP,CAAmBF,UAAnB,CAAb;;AAEA,SAASG,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,QAAIC,SAAS,EAAb;AACA,WAAO,aAAMC,KAAN,CAAY;AACfC,eAAO,EAACC,OAAOJ,KAAKI,KAAb,EADQ;AAEfC,iBAAS,EAACC,UAAUN,KAAKM,QAAhB;AAFM,KAAZ,EAGJC,KAHI,GAGIC,IAHJ,CAGS,gBAAQ;AACpB,YAAGC,IAAH,EAAQ;AACJ,gBAAIA,KAAKC,GAAL,CAAS,UAAT,MAAyBV,KAAKM,QAAlC,EAA4C;AACxCL,uBAAOK,QAAP,GAAkB,iCAAlB;AACH;AACD,gBAAGG,KAAKC,GAAL,CAAS,OAAT,MAAsBV,KAAKI,KAA9B,EAAqC;AACjCH,uBAAOG,KAAP,GAAe,8BAAf;AACH;AACD,mBAAO;AACHH,8BADG;AAEHU,yBAAS,uBAAQV,MAAR;AAFN,aAAP;AAIH,SAXD,MAWO,OAAO,EAACA,cAAD,EAASU,SAAS,IAAlB,EAAP;AACV,KAhBM,CAAP;AAiBH;;AAEDjB,OAAOkB,IAAP,CAAY,GAAZ,EAAgB,UAACC,GAAD,EAAKC,GAAL,EAAa;AAAA,oBACsBD,IAAIE,IAD1B;AAAA,QACjBX,KADiB,aACjBA,KADiB;AAAA,QACVY,QADU,aACVA,QADU;AAAA,QACAV,QADA,aACAA,QADA;AAAA,QACUW,QADV,aACUA,QADV;;AAEzB,QAAMC,iBAAiB,iBAAOC,QAAP,CAAgBF,QAAhB,EAA0BpB,IAA1B,CAAvB;AACAE,kBAAcc,IAAIE,IAAlB,EAAwBP,IAAxB,CAA6B,gBAAuB;AAAA,YAArBP,MAAqB,QAArBA,MAAqB;AAAA,YAAbU,OAAa,QAAbA,OAAa;;AAChDS,gBAAQC,GAAR,CAAYpB,MAAZ,EAAoBU,OAApB;AACA,YAAGA,OAAH,EAAY;AACR,yBAAMW,KAAN,CAAY,EAACN,kBAAD,EAAUV,kBAAV,EAAmBF,YAAnB,EAAyBa,UAASC,cAAlC,EAAZ,EAA8D,EAACK,eAAc,IAAf,EAA9D,EAAoFC,IAApF,GACKhB,IADL,CACU,gBAAQ;AACVM,oBAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,6BAAQ;AADS,iBAArB;AAGH,aALL,EAMKC,KANL,CAMW,eAAO;AACVd,oBAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACG,OAAMC,GAAP,EAArB;AACH,aARL;AASH,SAVD,MAWK;AACDhB,gBAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACG,OAAM5B,MAAP,EAArB;AACH;AACJ,KAhBD;AAkBH,CArBD;;kBAuBeP,M","file":"signUp.js","sourcesContent":["import express from 'express';\nimport bcrypt from 'bcrypt';\nimport isEmpty from 'lodash/isEmpty';\nimport { Users } from '../models/Users';\nimport cors from 'cors';\n\nconst router = express.Router();\nconst saltRounds = 10;\nconst salt = bcrypt.genSaltSync(saltRounds);\n\nfunction validateInput(data) {\n    let errors = {};\n    return Users.query({\n        where: {email: data.email},\n        orWhere: {username: data.username}\n    }).fetch().then(user => {\n        if(user){\n            if (user.get('username') === data.username) {\n                errors.username = 'This username is already in use';\n            }\n            if(user.get('email') === data.email) {\n                errors.email = 'This email is already in use';\n            }\n            return {\n                errors,\n                isValid: isEmpty(errors)\n            }\n        } else return {errors, isValid: true}\n    })\n}\n\nrouter.post('/',(req,res) => {\n    const { email, fullname, username, password} = req.body;\n    const hashedPassword = bcrypt.hashSync(password, salt);\n    validateInput(req.body).then(({errors, isValid}) => {\n        console.log(errors, isValid);\n        if(isValid) {\n            Users.forge({fullname,username,email,password:hashedPassword},{hasTimestamps:true}).save()\n                .then(user => {\n                    res.status(200).json({\n                        success:true\n                    });\n                })\n                .catch(err => {\n                    res.status(500).json({error:err});\n                });\n        }\n        else {\n            res.status(400).json({error:errors})\n        }\n    });\n\n});\n\nexport default router;"]}